export const levels = [
  /* –£—Ä–æ–≤–µ–Ω—å 1: –û—Å–Ω–æ–≤—ã async/await */
  {
    title: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é",
    theory: `
      <section class="theory-block">
        <h2>üìå –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π vs –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥</h2>
        
        <div class="analogy">
          <p>–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –≤ –∫–∞—Ñ–µ:</p>
          <ul>
            <li><strong>–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥:</strong> –í—ã —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∂–¥—ë—Ç–µ –∑–∞–∫–∞–∑, –Ω–µ –¥–µ–ª–∞—è –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ.</li>
            <li><strong>–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥:</strong> –î–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑, —Å–∞–¥–∏—Ç–µ—Å—å –∑–∞ —Å—Ç–æ–ª (–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É), –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤.</li>
          </ul>
        </div>

        <h3>–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:</h3>
        <pre>import asyncio

async def make_coffee():
    print("–ù–∞—á–∏–Ω–∞–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ—Ñ–µ")
    await asyncio.sleep(3)  # ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    print("–ö–æ—Ñ–µ –≥–æ—Ç–æ–≤!")</pre>

        <table class="term-table">
          <tr><td><code>async def</code></td><td>–û–±—ä—è–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é</td></tr>
          <tr><td><code>await</code></td><td>"–ü–∞—É–∑–∞" –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</td></tr>
          <tr><td><code>asyncio.sleep()</code></td><td>–ê–Ω–∞–ª–æ–≥ time.sleep(), –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫</td></tr>
        </table>
      </section>

      <div class="warning">
        <p>üîπ <strong>–í–∞–∂–Ω–æ:</strong> –ë–µ–∑ <code>await</code> —Ñ—É–Ω–∫—Ü–∏—è "–∑–∞–≤–∏—Å–Ω–µ—Ç" –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏!</p>
      </div>
    `,
    task: "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∂–¥—ë—Ç 2 —Å–µ–∫—É–Ω–¥—ã –∏ –≤—ã–≤–æ–¥–∏—Ç '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'",
    code: `import asyncio\n\nasync def task():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ await asyncio.sleep(2) –ø–µ—Ä–µ–¥ print",
    check: code => code.includes("await asyncio.sleep(2)") && 
                  code.includes("print(")
  },

  /* –£—Ä–æ–≤–µ–Ω—å 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ */
  {
    title: "–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º —Å create_task",
    theory: `
      <section class="theory-block">
        <h2>üßë‚Äçüç≥ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á</h2>
        
        <div class="comparison">
          <div class="wrong">
            <h3>‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (5 —Å–µ–∫):</h3>
            <pre>await task1()  # 3 —Å–µ–∫\nawait task2()  # 2 —Å–µ–∫</pre>
          </div>
          <div class="right">
            <h3>‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (3 —Å–µ–∫):</h3>
            <pre>t1 = asyncio.create_task(task1())\nt2 = asyncio.create_task(task2())\nawait t1\nawait t2</pre>
          </div>
        </div>

        <h3>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h3>
        <ol>
          <li><code>create_task</code> –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É "–≤ —Ñ–æ–Ω–µ"</li>
          <li>–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ</li>
          <li><code>await</code> –∂–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏</li>
        </ol>

        <div class="code-sample">
          <h3>–ü—Ä–∏–º–µ—Ä —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º:</h3>
          <pre>async def task(id, delay):
    print(f"–ó–∞–¥–∞—á–∞ {id} –Ω–∞—á–∞–ª–∞—Å—å")
    await asyncio.sleep(delay)
    print(f"–ó–∞–¥–∞—á–∞ {id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def main():
    t1 = asyncio.create_task(task(1, 2))
    t2 = asyncio.create_task(task(2, 1))
    await t1  # –ñ–¥—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É</pre>
          <p>–í—ã–≤–æ–¥: <code>–ó–∞–¥–∞—á–∞ 1 –Ω–∞—á–∞–ª–∞—Å—å ‚Üí –ó–∞–¥–∞—á–∞ 2 –Ω–∞—á–∞–ª–∞—Å—å ‚Üí –ó–∞–¥–∞—á–∞ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Üí –ó–∞–¥–∞—á–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞</code></p>
        </div>
      </section>
    `,
    task: "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–µ –∑–∞–¥–∞—á–∏: –ø–µ—Ä–≤–∞—è –ø–µ—á–∞—Ç–∞–µ—Ç 'A' —á–µ—Ä–µ–∑ 1 —Å–µ–∫, –≤—Ç–æ—Ä–∞—è 'B' —á–µ—Ä–µ–∑ 2 —Å–µ–∫",
    code: `import asyncio\n\nasync def print_a():\n    # –í–∞—à –∫–æ–¥\n\nasync def print_b():\n    # –í–∞—à –∫–æ–¥\n\nasync def main():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_task –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
    check: code => (code.match(/create_task\(/g) || []).length >= 2
  },

  /* –£—Ä–æ–≤–µ–Ω—å 3: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á */
  {
    title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –∑–∞–¥–∞—á",
    theory: `
      <section class="theory-block">
        <h2>üë®‚Äçüë©‚Äçüëß‚Äçüë¶ asyncio.gather</h2>
        
        <div class="use-case">
          <h3>–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</h3>
          <p>–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ:</p>
          <ul>
            <li>–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</li>
            <li>–î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è <strong>–≤—Å–µ—Ö</strong> –∑–∞–¥–∞—á</li>
            <li>–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–º–µ—Å—Ç–µ</li>
          </ul>
        </div>

        <h3>–ü—Ä–∏–º–µ—Ä: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</h3>
        <pre>async def download(url):
    print(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {url}")
    await asyncio.sleep(1)  # –≠–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    return f"–î–∞–Ω–Ω—ã–µ {url}"

async def main():
    urls = ["url1.com", "url2.com", "url3.com"]
    results = await asyncio.gather(*[download(url) for url in urls])
    print(results)  # ['–î–∞–Ω–Ω—ã–µ url1.com', ...]</pre>

        <table class="features">
          <tr><th>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å</th><th>–û–ø–∏—Å–∞–Ω–∏–µ</th></tr>
          <tr><td>–ü–æ—Ä—è–¥–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</td><td>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—è–¥–∫—É –∑–∞–¥–∞—á, –∞ –Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</td></tr>
          <tr><td>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</td><td>–ü—Ä–∏ <code>return_exceptions=True</code> –æ—à–∏–±–∫–∏ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</td></tr>
        </table>
      </section>
    `,
    task: "–ó–∞–ø—É—Å—Ç–∏—Ç–µ 3 –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–∫–∞–∂–¥–∞—è –∂–¥—ë—Ç 1 —Å–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ)",
    code: `import asyncio\n\nasync def task(n):\n    # –í–∞—à –∫–æ–¥\n\nasync def main():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gather(task(1), task(2), task(3))",
    check: code => code.includes("gather(") && 
                  (code.match(/task\(/g) || []).length >= 3
  },

  /* –£—Ä–æ–≤–µ–Ω—å 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ */
  {
    title: "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ",
    theory: `
      <section class="theory-block">
        <h2>üö® –û—à–∏–±–∫–∏ –∏ asyncio</h2>
        
        <div class="error-types">
          <h3>–¢–∏–ø–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</h3>
          <ul>
            <li><strong>–û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ</strong> - –∫–∞–∫ –Ω–µ —Å–ª–æ–º–∞—Ç—å –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?</li>
            <li><strong>–¢–∞–π–º–∞—É—Ç—ã</strong> - —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞?</li>
            <li><strong>–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á</strong> - –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?</li>
          </ul>
        </div>

        <h3>–ü—Ä–∏–º–µ—Ä: –õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è</h3>
        <pre>async def risky_operation():
    await asyncio.sleep(1)
    raise ValueError("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

async def main():
    try:
        await risky_operation()
    except ValueError as e:
        print(f"–ü–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É: {e}")</pre>

        <h3>–û—à–∏–±–∫–∏ –≤ gather</h3>
        <pre>async def main():
    tasks = [task1(), task2()]  # –ü—É—Å—Ç—å task2 —É–ø–∞–¥—ë—Ç —Å –æ—à–∏–±–∫–æ–π
    results = await asyncio.gather(
        *tasks,
        return_exceptions=True  # –í–∞–∂–Ω–æ!
    )
    print(results)  # [—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ—à–∏–±–∫–∞]</pre>
      </section>
    `,
    task: "–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ await)",
    code: `import asyncio\n\nasync def fail_task():\n    # –í–∞—à –∫–æ–¥\n\nasync def main():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ try/except –≤–æ–∫—Ä—É–≥ await",
    check: code => code.includes("try:") && 
                  code.includes("except ") && 
                  code.includes("await ")
  },

  /* –£—Ä–æ–≤–µ–Ω—å 5: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã */
  {
    title: "–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π",
    theory: `
      <section class="theory-block">
        <h2>üìÇ aiofiles: –§–∞–π–ª—ã –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫</h2>
        
        <div class="why-async">
          <h3>–ü—Ä–æ–±–ª–µ–º–∞ –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:</h3>
          <p>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ <code>open()/read()/write()</code> –±–ª–æ–∫–∏—Ä—É—é—Ç –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —á—Ç–æ —Å–≤–æ–¥–∏—Ç –Ω–∞ –Ω–µ—Ç –≤—Å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å.</p>
        </div>

        <h3>–†–µ—à–µ–Ω–∏–µ: aiofiles</h3>
        <pre>import aiofiles

async def write_log(message):
    async with aiofiles.open('log.txt', mode='a') as f:
        await f.write(message + "\\n")

async def read_log():
    async with aiofiles.open('log.txt', mode='r') as f:
        content = await f.read()
        print(content)</pre>

        <table class="file-modes">
          <tr><th>–†–µ–∂–∏–º</th><th>–û–ø–∏—Å–∞–Ω–∏–µ</th></tr>
          <tr><td><code>'r'</code></td><td>–ß—Ç–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)</td></tr>
          <tr><td><code>'w'</code></td><td>–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞</td></tr>
          <tr><td><code>'a'</code></td><td>–î–æ–∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω–µ—Ü</td></tr>
        </table>
      </section>
    `,
    task: "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª 'data.txt' –∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–µ–≥–æ —Å—Ç—Ä–æ–∫—É '–¢–µ—Å—Ç'",
    code: `import aiofiles\n\nasync def create_file():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ aiofiles.open() —Å —Ä–µ–∂–∏–º–æ–º 'w'",
    check: code => code.includes("aiofiles.open(") && 
                  code.includes("'w'") && 
                  code.includes("await f.write(")
  },

  /* –£—Ä–æ–≤–µ–Ω—å 6: –í–µ–±—Å–æ–∫–µ—Ç—ã */
  {
    title: "–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å WebSocket",
    theory: `
      <section class="theory-block">
        <h2>üåê WebSocket: –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –æ–±—â–µ–Ω–∏–µ</h2>
        
        <div class="vs-http">
          <h3>WebSocket vs HTTP:</h3>
          <ul>
            <li><strong>HTTP</strong> - –∫–∞–∫ –ø–∏—Å—å–º–∞: –∑–∞–ø—Ä–æ—Å ‚Üí –æ—Ç–≤–µ—Ç ‚Üí —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è</li>
            <li><strong>WebSocket</strong> - –∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫: –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
          </ul>
        </div>

        <h3>–ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:</h3>
        <pre>from websockets import connect

async def chat_client():
    async with connect("wss://echo.websocket.org") as ws:
        await ws.send("–ü—Ä–∏–≤–µ—Ç!")
        reply = await ws.recv()
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {reply}")</pre>

        <h3>–ì–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è?</h3>
        <div class="applications">
          <div class="app-card">
            <h4>üí¨ –ß–∞—Ç—ã</h4>
            <p>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
          </div>
          <div class="app-card">
            <h4>üéÆ –û–Ω–ª–∞–π–Ω-–∏–≥—Ä—ã</h4>
            <p>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤</p>
          </div>
        </div>
      </section>
    `,
    task: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 'Ping' –Ω–∞ wss://echo.websocket.org –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
    code: `from websockets import connect\n\nasync def send_ping():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ await ws.send() –∏ await ws.recv()",
    check: code => code.includes("connect(") && 
                  code.includes("await ws.send(") && 
                  code.includes("await ws.recv(")
  },

  /* –£—Ä–æ–≤–µ–Ω—å 7: –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á */
  {
    title: "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏",
    theory: `
      <section class="theory-block">
        <h2>üì≠ asyncio.Queue: –û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏</h2>
        
        <div class="queue-concept">
          <h3>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏:</h3>
          <p>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ (producers) –¥–æ–±–∞–≤–ª—è—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ (consumers) –∑–∞–±–∏—Ä–∞—é—Ç –∏—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.</p>
        </div>

        <h3>–ü—Ä–∏–º–µ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á</h3>
        <pre>queue = asyncio.Queue()

async def producer():
    for i in range(3):
        await queue.put(f"–ó–∞–¥–∞—á–∞-{i}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: –ó–∞–¥–∞—á–∞-{i}")

async def consumer():
    while True:
        item = await queue.get()
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {item}")
        queue.task_done()  # –í–∞–∂–Ω–æ!</pre>

        <h3>–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã:</h3>
        <table class="queue-methods">
          <tr><th>–ú–µ—Ç–æ–¥</th><th>–û–ø–∏—Å–∞–Ω–∏–µ</th></tr>
          <tr><td><code>put(item)</code></td><td>–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç</td></tr>
          <tr><td><code>get()</code></td><td>–ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç</td></tr>
          <tr><td><code>task_done()</code></td><td>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É</td></tr>
          <tr><td><code>join()</code></td><td>–ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á</td></tr>
        </table>
      </section>
    `,
    task: "–°–æ–∑–¥–∞–π—Ç–µ 2 –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π (–∫–∞–∂–¥—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç 2 —á–∏—Å–ª–∞) –∏ 1 –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    code: `import asyncio\n\nqueue = asyncio.Queue()\n\nasync def producer(id):\n    # –í–∞—à –∫–æ–¥\n\nasync def consumer():\n    # –í–∞—à –∫–æ–¥\n\nasync def main():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ queue.put() –∏ queue.get()",
    check: code => code.includes("Queue()") && 
                  (code.match(/put\(/g) || []).length >= 2 &&
                  code.includes("get()")
  },

  /* –£—Ä–æ–≤–µ–Ω—å 8: –°–µ–º–∞—Ñ–æ—Ä—ã */
  {
    title: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞",
    theory: `
      <section class="theory-block">
        <h2>üö¶ Semaphore: –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞</h2>
        
        <div class="semaphore-analogy">
          <h3>–ê–Ω–∞–ª–æ–≥–∏—è:</h3>
          <p>–°–µ–º–∞—Ñ–æ—Ä - —ç—Ç–æ –∫–∞–∫ —Ç—É—Ä–Ω–∏–∫–µ—Ç –≤ –º–µ—Ç—Ä–æ: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.</p>
        </div>

        <h3>–ü—Ä–∏–º–µ—Ä: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API-–∑–∞–ø—Ä–æ—Å–æ–≤</h3>
        <pre>sem = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞

async def fetch_data(url):
    async with sem:  # "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º" —Å–ª–æ—Ç
        print(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {url}")
        await asyncio.sleep(1)  # –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {url}")</pre>

        <h3>–ì–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</h3>
        <ul>
          <li>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î</li>
          <li>–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API</li>
          <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã</li>
        </ul>
      </section>
    `,
    task: "–ó–∞–ø—É—Å—Ç–∏—Ç–µ 5 –∑–∞–¥–∞—á —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 2 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    code: `import asyncio\n\nasync def task(id):\n    # –í–∞—à –∫–æ–¥\n\nasync def main():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Semaphore(2) –∏ async with sem",
    check: code => code.includes("Semaphore(") && 
                  code.includes("async with sem") &&
                  (code.match(/task\(/g) || []).length >= 5
  },

  /* –£—Ä–æ–≤–µ–Ω—å 9: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º */
  {
    title: "–†–∞–±–æ—Ç–∞ —Å –ø–æ—Ç–æ–∫–∞–º–∏",
    theory: `
      <section class="theory-block">
        <h2>üîÑ asyncio.to_thread</h2>
        
        <div class="sync-async">
          <h3>–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ?</h3>
          <p>–ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π).</p>
        </div>

        <h3>–ü—Ä–∏–º–µ—Ä: "–û–±—ë—Ä—Ç–∫–∞" –¥–ª—è time.sleep</h3>
        <pre>import time

def sync_sleep(seconds):  # –û–±—ã—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    time.sleep(seconds)
    return "–ì–æ—Ç–æ–≤–æ"

async def main():
    result = await asyncio.to_thread(sync_sleep, 2)
    print(result)  # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã</pre>

        <div class="warning">
          <h3>‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</h3>
          <ul>
            <li>–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è CPU-bound –∑–∞–¥–∞—á (–ª—É—á—à–µ multiprocessing)</li>
            <li>–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</li>
          </ul>
        </div>
      </section>
    `,
    task: "–ó–∞–ø—É—Å—Ç–∏—Ç–µ time.sleep(2) —á–µ—Ä–µ–∑ to_thread –∏ –≤—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
    code: `import asyncio\nimport time\n\ndef sync_task():\n    # –í–∞—à –∫–æ–¥\n\nasync def main():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ await asyncio.to_thread(sync_task)",
    check: code => code.includes("to_thread(") && 
                  code.includes("time.sleep(")
  },

  /* –£—Ä–æ–≤–µ–Ω—å 10: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç */
  {
    title: "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–µ–±-–∫—Ä–∞—É–ª–µ—Ä",
    theory: `
      <section class="theory-block">
        <h2>üï∑Ô∏è –ö—Ä–∞—É–ª–µ—Ä: –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ</h2>
        
        <div class="crawler-architecture">
          <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–µ—à–µ–Ω–∏—è:</h3>
          <ol>
            <li><strong>–û—á–µ—Ä–µ–¥—å URL</strong> - asyncio.Queue –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏</li>
            <li><strong>–°–µ–º–∞—Ñ–æ—Ä</strong> - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</li>
            <li><strong>aiohttp</strong> - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã</li>
            <li><strong>aiofiles</strong> - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
          </ol>
        </div>

        <h3>–ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫–æ–¥:</h3>
        <pre>async def crawler(url):
    async with semaphore:
        async with session.get(url) as response:
            data = await response.text()
            await save_to_file(url, data)

async def main():
    urls = ["url1.com", "url2.com", ...]
    tasks = [crawler(url) for url in urls]
    await asyncio.gather(*tasks)</pre>

        <div class="bonus">
          <h3>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:</h3>
          <ul>
            <li>–ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –∏–∑ HTML</li>
            <li>–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ —Å–∞–π—Ç–∞</li>
            <li>–û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—ã</li>
          </ul>
        </div>
      </section>
    `,
    task: "–°–∫–∞—á–∞–π—Ç–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞",
    code: `import aiohttp\nimport asyncio\n\nsemaphore = asyncio.Semaphore(2)\n\nasync def fetch(url):\n    # –í–∞—à –∫–æ–¥\n\nasync def main():\n    urls = [...]\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å`,
    hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gather + Semaphore",
    check: code => code.includes("Semaphore(") && 
                  code.includes("aiohttp.ClientSession(") && 
                  code.includes("gather(")
  }
];